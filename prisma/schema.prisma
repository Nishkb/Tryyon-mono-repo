// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  username     String  @unique
  firstname    String
  lastname     String
  phone        Int     @unique
  email        String  @unique
  passwordHash String
  token        String?
  adminToken   String?
  role         Role?   @relation(fields: [roleId], references: [id])
  roleId       String? @db.ObjectId
}

model Role {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  title  String  @unique
  admins Admin[]
}

model Product {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String?
  shortDescriptions String?
  slug              String
  quantity          Int     @default(0)
  approved          Boolean @default(false)
  published         Boolean @default(false)
  price             Float
  discountedPrice   Float?
}

model Tenant {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  company      Company        @relation(fields: [companyId], references: [id])
  companyId    String         @unique @db.ObjectId
  Associations Associations[]
}

model Company {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  gstNumber      String  @unique
  gstCertificate String?
  panNumber      String  @unique
  panCard        String?
  aadharNumber   String  @unique
  aadharCard     String?
  adminApproval  Boolean @default(false)
  owner          User    @relation(fields: [ownerId], references: [id])
  ownerId        String  @unique
  tenant         Tenant?
}

model User {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  username           String        @unique
  firstname          String
  lastname           String
  phone              Int           @unique
  email              String        @unique
  passwordHash       String
  token              String?
  email_verified     Boolean       @default(false)
  verificationCode   String?
  verificationExpiry DateTime?
  associations       Associations?
  company            Company?
}

model Associations {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique @db.ObjectId
  tenant   Tenant  @relation(fields: [tenantId], references: [id])
  tenantId String  @db.ObjectId
  approval Boolean @default(false)
}
